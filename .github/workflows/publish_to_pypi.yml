name: Build and Publish

on: [workflow_dispatch]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            job_name: "Ubuntu AMD64 Build"
          - os: macos-14
            job_name: "MacOS 14 ARM64 Build"
          - os: macos-13
            job_name: "MacOS 13 x86_64 Build"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      # Set per-runner macOS targets
      - name: Set deployment target (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=10.14" >> $GITHUB_ENV
            echo "CMAKE_OSX_DEPLOYMENT_TARGET=10.14" >> $GITHUB_ENV
          else
            # macOS-14 / arm64 must be >= 11.0
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
            echo "CMAKE_OSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_ARCHS_MACOS: "native"     # macos-13 => x86_64, macos-14 => arm64
          CIBW_ARCHS_LINUX: "x86_64"

          # Avoid slow ninja build-from-source
          CIBW_BEFORE_BUILD: "python -m pip install -U pip setuptools wheel 'ninja==1.11.1.1'"
          CIBW_ENVIRONMENT: "PIP_ONLY_BINARY=ninja"

          CIBW_BEFORE_ALL_LINUX: "sh build-linux.sh"
          CIBW_BEFORE_ALL_MACOS: "sh build-macos.sh"
          CIBW_BEFORE_ALL_WINDOWS: " "

          # Ensure delocate uses the same archs; tag will match MACOSX_DEPLOYMENT_TARGET
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}"

          # Python versions
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-* cp314-*"

        with:
          output-dir: wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

      - name: Publish to PyPI
        run: twine upload wheelhouse/*.whl --verbose --skip-existing
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
